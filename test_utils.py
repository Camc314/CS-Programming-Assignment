import unittest
from utils import BoardUtils, getMidpoint


class TestGetPointFromCoordinate(unittest.TestCase):
    def test_case_1(self):
        """Tests get getPointFromCoordinates with a board size of 8x8"""
        util = BoardUtils(8, 8, 100, 100)
        self.assertEqual(util.getPointFromCoordinates([0, 0]), 1)
        self.assertEqual(util.getPointFromCoordinates([1, 0]), 2)
        self.assertEqual(util.getPointFromCoordinates([2, 0]), 3)
        self.assertEqual(util.getPointFromCoordinates([3, 0]), 4)
        self.assertEqual(util.getPointFromCoordinates([4, 0]), 5)
        self.assertEqual(util.getPointFromCoordinates([5, 0]), 6)
        self.assertEqual(util.getPointFromCoordinates([6, 0]), 7)
        self.assertEqual(util.getPointFromCoordinates([7, 0]), 8)
        self.assertEqual(util.getPointFromCoordinates([7, 1]), 9)
        self.assertEqual(util.getPointFromCoordinates([6, 1]), 10)
        self.assertEqual(util.getPointFromCoordinates([5, 1]), 11)
        self.assertEqual(util.getPointFromCoordinates([4, 1]), 12)
        self.assertEqual(util.getPointFromCoordinates([3, 1]), 13)
        self.assertEqual(util.getPointFromCoordinates([2, 1]), 14)
        self.assertEqual(util.getPointFromCoordinates([1, 1]), 15)
        self.assertEqual(util.getPointFromCoordinates([0, 1]), 16)
        self.assertEqual(util.getPointFromCoordinates([0, 2]), 17)
        self.assertEqual(util.getPointFromCoordinates([1, 2]), 18)
        self.assertEqual(util.getPointFromCoordinates([2, 2]), 19)
        self.assertEqual(util.getPointFromCoordinates([3, 2]), 20)
        self.assertEqual(util.getPointFromCoordinates([4, 2]), 21)
        self.assertEqual(util.getPointFromCoordinates([5, 2]), 22)
        self.assertEqual(util.getPointFromCoordinates([6, 2]), 23)
        self.assertEqual(util.getPointFromCoordinates([7, 2]), 24)
        self.assertEqual(util.getPointFromCoordinates([7, 3]), 25)

    def test_case_2(self):
        """Tests get getPointFromCoordinates with a board size of 5x5"""
        util = BoardUtils(5, 5, 100, 100)
        self.assertEqual(util.getPointFromCoordinates([0, 0]), 1)
        self.assertEqual(util.getPointFromCoordinates([1, 0]), 2)
        self.assertEqual(util.getPointFromCoordinates([2, 0]), 3)
        self.assertEqual(util.getPointFromCoordinates([3, 0]), 4)
        self.assertEqual(util.getPointFromCoordinates([4, 0]), 5)
        self.assertEqual(util.getPointFromCoordinates([4, 1]), 6)
        self.assertEqual(util.getPointFromCoordinates([3, 1]), 7)
        self.assertEqual(util.getPointFromCoordinates([2, 1]), 8)
        self.assertEqual(util.getPointFromCoordinates([1, 1]), 9)
        self.assertEqual(util.getPointFromCoordinates([0, 1]), 10)
        self.assertEqual(util.getPointFromCoordinates([0, 2]), 11)
        self.assertEqual(util.getPointFromCoordinates([1, 2]), 12)
        self.assertEqual(util.getPointFromCoordinates([2, 2]), 13)
        self.assertEqual(util.getPointFromCoordinates([3, 2]), 14)
        self.assertEqual(util.getPointFromCoordinates([4, 2]), 15)
        self.assertEqual(util.getPointFromCoordinates([4, 3]), 16)
        self.assertEqual(util.getPointFromCoordinates([3, 3]), 17)
        self.assertEqual(util.getPointFromCoordinates([2, 3]), 18)
        self.assertEqual(util.getPointFromCoordinates([1, 3]), 19)
        self.assertEqual(util.getPointFromCoordinates([0, 3]), 20)
        self.assertEqual(util.getPointFromCoordinates([0, 4]), 21)
        self.assertEqual(util.getPointFromCoordinates([1, 4]), 22)
        self.assertEqual(util.getPointFromCoordinates([2, 4]), 23)
        self.assertEqual(util.getPointFromCoordinates([3, 4]), 24)
        self.assertEqual(util.getPointFromCoordinates([4, 4]), 25)

    def test_case_2(self):
        """Tests get getPointFromCoordinates with a board size of 6x5"""
        util = BoardUtils(6, 5, 100, 100)
        self.assertEqual(util.getPointFromCoordinates([0, 0]), 1)
        self.assertEqual(util.getPointFromCoordinates([1, 0]), 2)
        self.assertEqual(util.getPointFromCoordinates([2, 0]), 3)
        self.assertEqual(util.getPointFromCoordinates([3, 0]), 4)
        self.assertEqual(util.getPointFromCoordinates([4, 0]), 5)
        self.assertEqual(util.getPointFromCoordinates([5, 0]), 6)
        self.assertEqual(util.getPointFromCoordinates([5, 1]), 7)
        self.assertEqual(util.getPointFromCoordinates([4, 1]), 8)
        self.assertEqual(util.getPointFromCoordinates([3, 1]), 9)
        self.assertEqual(util.getPointFromCoordinates([2, 1]), 10)
        self.assertEqual(util.getPointFromCoordinates([1, 1]), 11)
        self.assertEqual(util.getPointFromCoordinates([0, 1]), 12)
        self.assertEqual(util.getPointFromCoordinates([0, 2]), 13)
        self.assertEqual(util.getPointFromCoordinates([1, 2]), 14)
        self.assertEqual(util.getPointFromCoordinates([2, 2]), 15)
        self.assertEqual(util.getPointFromCoordinates([3, 2]), 16)
        self.assertEqual(util.getPointFromCoordinates([4, 2]), 17)
        self.assertEqual(util.getPointFromCoordinates([5, 2]), 18)
        self.assertEqual(util.getPointFromCoordinates([5, 3]), 19)
        self.assertEqual(util.getPointFromCoordinates([4, 3]), 20)
        self.assertEqual(util.getPointFromCoordinates([3, 3]), 21)
        self.assertEqual(util.getPointFromCoordinates([2, 3]), 22)
        self.assertEqual(util.getPointFromCoordinates([1, 3]), 23)
        self.assertEqual(util.getPointFromCoordinates([0, 3]), 24)


class TestGetCoordinates(unittest.TestCase):
    """Tests Get coordinates function"""

    def test_case_1(self):
        """Tests get coordinates with a board size of 5x5"""
        util = BoardUtils(5, 5, 100, 100)

        self.assertEqual(util.getCoordinates(1), (0, 0))
        self.assertEqual(util.getCoordinates(2), (1, 0))
        self.assertEqual(util.getCoordinates(3), (2, 0))
        self.assertEqual(util.getCoordinates(4), (3, 0))
        self.assertEqual(util.getCoordinates(5), (4, 0))
        self.assertEqual(util.getCoordinates(6), (4, 1))
        self.assertEqual(util.getCoordinates(7), (3, 1))
        self.assertEqual(util.getCoordinates(8), (2, 1))
        self.assertEqual(util.getCoordinates(9), (1, 1))
        self.assertEqual(util.getCoordinates(10), (0, 1))
        self.assertEqual(util.getCoordinates(11), (0, 2))
        self.assertEqual(util.getCoordinates(12), (1, 2))
        self.assertEqual(util.getCoordinates(13), (2, 2))
        self.assertEqual(util.getCoordinates(14), (3, 2))
        self.assertEqual(util.getCoordinates(15), (4, 2))
        self.assertEqual(util.getCoordinates(16), (4, 3))
        self.assertEqual(util.getCoordinates(17), (3, 3))
        self.assertEqual(util.getCoordinates(18), (2, 3))
        self.assertEqual(util.getCoordinates(19), (1, 3))
        self.assertEqual(util.getCoordinates(20), (0, 3))
        self.assertEqual(util.getCoordinates(21), (0, 4))
        self.assertEqual(util.getCoordinates(22), (1, 4))
        self.assertEqual(util.getCoordinates(23), (2, 4))
        self.assertEqual(util.getCoordinates(24), (3, 4))
        self.assertEqual(util.getCoordinates(25), (4, 4))

    def test_case_2(self):
        """Tests get coordinates with a board size of 4x4"""
        util = BoardUtils(4, 4, 100, 100)

        self.assertEqual(util.getCoordinates(1), (0, 0))
        self.assertEqual(util.getCoordinates(2), (1, 0))
        self.assertEqual(util.getCoordinates(3), (2, 0))
        self.assertEqual(util.getCoordinates(4), (3, 0))
        self.assertEqual(util.getCoordinates(5), (3, 1))
        self.assertEqual(util.getCoordinates(6), (2, 1))
        self.assertEqual(util.getCoordinates(7), (1, 1))
        self.assertEqual(util.getCoordinates(8), (0, 1))
        self.assertEqual(util.getCoordinates(9), (0, 2))
        self.assertEqual(util.getCoordinates(10), (1, 2))
        self.assertEqual(util.getCoordinates(11), (2, 2))
        self.assertEqual(util.getCoordinates(12), (3, 2))
        self.assertEqual(util.getCoordinates(13), (3, 3))
        self.assertEqual(util.getCoordinates(14), (2, 3))
        self.assertEqual(util.getCoordinates(15), (1, 3))
        self.assertEqual(util.getCoordinates(16), (0, 3))

    def test_case_3(self):
        """Tests get coordinates with a board size of 7x4"""
        util = BoardUtils(7, 4, 100, 100)
        self.assertEqual(util.getCoordinates(1), (0, 0))
        self.assertEqual(util.getCoordinates(2), (1, 0))
        self.assertEqual(util.getCoordinates(3), (2, 0))
        self.assertEqual(util.getCoordinates(4), (3, 0))
        self.assertEqual(util.getCoordinates(5), (4, 0))
        self.assertEqual(util.getCoordinates(6), (5, 0))
        self.assertEqual(util.getCoordinates(7), (6, 0))
        self.assertEqual(util.getCoordinates(8), (6, 1))
        self.assertEqual(util.getCoordinates(9), (5, 1))
        self.assertEqual(util.getCoordinates(10), (4, 1))
        self.assertEqual(util.getCoordinates(11), (3, 1))
        self.assertEqual(util.getCoordinates(12), (2, 1))
        self.assertEqual(util.getCoordinates(13), (1, 1))
        self.assertEqual(util.getCoordinates(14), (0, 1))
        self.assertEqual(util.getCoordinates(15), (0, 2))
        self.assertEqual(util.getCoordinates(16), (1, 2))
        self.assertEqual(util.getCoordinates(17), (2, 2))
        self.assertEqual(util.getCoordinates(18), (3, 2))
        self.assertEqual(util.getCoordinates(19), (4, 2))
        self.assertEqual(util.getCoordinates(20), (5, 2))
        self.assertEqual(util.getCoordinates(21), (6, 2))
        self.assertEqual(util.getCoordinates(22), (6, 3))
        self.assertEqual(util.getCoordinates(23), (5, 3))
        self.assertEqual(util.getCoordinates(24), (4, 3))
        self.assertEqual(util.getCoordinates(25), (3, 3))
        self.assertEqual(util.getCoordinates(26), (2, 3))
        self.assertEqual(util.getCoordinates(27), (1, 3))
        self.assertEqual(util.getCoordinates(28), (0, 3))


class TestGetMidpoint(unittest.TestCase):
    def test_case_1(self):
        """Tests get midpoint"""
        self.assertEqual(getMidpoint((0, 0), (2, 2)), (1, 1))
        self.assertEqual(getMidpoint((0, 0), (4, 4)), (2, 2))
        self.assertEqual(getMidpoint((1, 1), (3, 3)), (2, 2))
        self.assertEqual(getMidpoint((1, 4), (4, 4)), (2.5, 4))


if __name__ == "__main__":
    unittest.main()
